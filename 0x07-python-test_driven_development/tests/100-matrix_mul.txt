============================
How to Use 100-matrix_mul.py
============================

This module defines a matrix multiplication function ``matrix_mul(m_a, m_b)``.

Usage
=====
``matrix_mul(...)`` returns a new matrix representing the multiplication of
``m_a`` by ``m_b``.

::

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul
    >>> m_a = [
    ... [2, 4],
    ... [6, 8],
    ... ]
    >>> m_b = m_a
    >>> print(matrix_mul(m_a, m_b))
    [[28, 40], [60, 88]]

::

    >>> m_a = [[2, 4]]
    >>> m_b = [
    ... [6, 8],
    ... [10, 12]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[26, 32]]

The function also works with floating-point numbers.

::

    >>> m_a = [
    ... [2.4, 11.0, 12.4],
    ... [9.32, 24.6, -18.4]
    ... ]
    >>> m_b = [
    ... [10.0, 6.6],
    ... [-5.8, 8.8],
    ... [14.4, 8.8]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[69.38, 110.88], [-156.22, 57.544000000000004]]

Integers and floats can be combined.

::

    >>> m_a = [
    ... [2, 4.4, 6.6, 8],
    ... [10, 12, 14, 17.6],
    ... ]
    >>> m_b = [
    ... [1.1, 2, 3.3],
    ... [8.0, 11.0, 12],
    ... [14, 16, 18],
    ... [20.02, 22, 24.6]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    [[146.08, 169.0, 190.8], [333.176, 391.6, 447.48]]

A minimum of two arguments must be provided. Otherwise, a TypeError is raised.

::

    >>> print(matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments: 
    'm_a' and 'm_b'

::

    >>> print(matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
    TypeError: matrix_mul() missing 2 required positional arguments: 
    'm_a' and 'm_b'

ValueErrors
===========

If two matrices cannot be multiplied (ie. the row count of ``m_a`` is not
equal to the column count in ``m_b``), a ValueError is raised.

::

    >>> m_a = [
    ... [2, 4],
    ... [6, 8],
    ... ]
    >>> m_b = [
    ... [2, 4],
    ... [4, 6],
    ... [8, 10]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ValueError: m_a and m_b can't be multiplied


The parameters ``m_a`` and ``m_b`` cannot be empty. Otherwise, a ValueError
is raised.

::

    >>> print(matrix_mul([], [[2, 4]]))
    Traceback (most recent call last):
    ValueError: m_a can't be empty

::

    >>> print(matrix_mul([[2, 4]], [[]]))
    Traceback (most recent call last):
    ValueError: m_b can't be empty

::

    >>> print(matrix_mul([[]], []))
    Traceback (most recent call last):
    ValueError: m_a can't be empty

Invalid Matrices
================

The parameters ``m_a`` and ``m_b`` must be lists. If either parameter is
not a list, a TypeError is raised.

::

    >>> print(matrix_mul("not a list", [[2, 4]]))
    Traceback (most recent call last):
    TypeError: m_a must be a list

::

    >>> print(matrix_mul([[2, 4]], "also not a list"))
    Traceback (most recent call last):
    TypeError: m_b must be a list

::

    >>> print(matrix_mul("not a list", "also not a list"))
    Traceback (most recent call last):
    TypeError: m_a must be a list

::

    >>> print(matrix_mul(None, None))
    Traceback (most recent call last):
    TypeError: m_a must be a list

Not just any list - they *must* be lists of lists!

::

    >>> print(matrix_mul([2, 4], [[3, 4]]))
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

::

    >>> print(matrix_mul([[2, 4]], [3, 4]))
    Traceback (most recent call last):
    TypeError: m_b must be a list of lists

::

    >>> print(matrix_mul([2, 4], [3, 4]))
    Traceback (most recent call last):
    TypeError: m_a must be a list of lists

And not just any list of lists - they *must* be lists of lists containing
integers or floats!

::

    >>> print(matrix_mul([[2, "non-number"]], [[3, 4]]))
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

::

    >>> print(matrix_mul([[2, 4]], [[{"a": 2}, 17.6]]))
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

::

    >>> print(matrix_mul([[2, "non-number"]], [[{"a": 2}, 17.6]]))
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

Finally, the length of all rows in matrices ``m_a`` and ``m_b`` should be
equivalent. Otherwise, a TypeError is raised.

::

    >>> m_a = [
    ... [2, 4],
    ... [6, 8, 10]
    ... ]
    >>> m_b = [
    ... [2, 4],
    ... [6, 8]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_a must should be of the same size

::

    >>> m_a = [
    ... [2, 4],
    ... [6, 8]
    ... ]
    >>> m_b = [
    ... [2, 4],
    ... [6, 8, 10]
    ... ]
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_b must should be of the same size

::

    >>> m_a = [
    ... [2, 4],
    ... [6, 8, 10]
    ... ]
    >>> m_b = m_a
    >>> print(matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    TypeError: each row of m_a must should be of the same size

